// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BlobF struct {
	_tab flatbuffers.Table
}

func GetRootAsBlobF(buf []byte, offset flatbuffers.UOffsetT) *BlobF {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BlobF{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BlobF) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BlobF) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BlobF) PackedMeta() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BlobF) MutatePackedMeta(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *BlobF) Tracts(obj *TractF, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BlobF) TractsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BlobF) Deletedsec() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BlobF) MutateDeletedsec(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *BlobF) Mtimesec() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BlobF) MutateMtimesec(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *BlobF) Atimesec() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BlobF) MutateAtimesec(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *BlobF) Expiressec() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BlobF) MutateExpiressec(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func BlobFStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func BlobFAddPackedMeta(builder *flatbuffers.Builder, packedMeta uint32) {
	builder.PrependUint32Slot(0, packedMeta, 0)
}
func BlobFAddTracts(builder *flatbuffers.Builder, tracts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tracts), 0)
}
func BlobFStartTractsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BlobFAddDeletedsec(builder *flatbuffers.Builder, deletedsec uint32) {
	builder.PrependUint32Slot(2, deletedsec, 0)
}
func BlobFAddMtimesec(builder *flatbuffers.Builder, mtimesec uint32) {
	builder.PrependUint32Slot(3, mtimesec, 0)
}
func BlobFAddAtimesec(builder *flatbuffers.Builder, atimesec uint32) {
	builder.PrependUint32Slot(4, atimesec, 0)
}
func BlobFAddExpiressec(builder *flatbuffers.Builder, expiressec uint32) {
	builder.PrependUint32Slot(5, expiressec, 0)
}
func BlobFEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
