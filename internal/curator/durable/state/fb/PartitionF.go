// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PartitionF struct {
	_tab flatbuffers.Table
}

func GetRootAsPartitionF(buf []byte, offset flatbuffers.UOffsetT) *PartitionF {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PartitionF{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PartitionF) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PartitionF) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PartitionF) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PartitionF) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *PartitionF) NextBlobKey() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PartitionF) MutateNextBlobKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *PartitionF) NextRsChunkKey() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PartitionF) MutateNextRsChunkKey(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func PartitionFStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PartitionFAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func PartitionFAddNextBlobKey(builder *flatbuffers.Builder, nextBlobKey uint32) {
	builder.PrependUint32Slot(1, nextBlobKey, 0)
}
func PartitionFAddNextRsChunkKey(builder *flatbuffers.Builder, nextRsChunkKey uint64) {
	builder.PrependUint64Slot(2, nextRsChunkKey, 0)
}
func PartitionFEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
