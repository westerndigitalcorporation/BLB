// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TractF struct {
	_tab flatbuffers.Table
}

func GetRootAsTractF(buf []byte, offset flatbuffers.UOffsetT) *TractF {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TractF{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TractF) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TractF) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TractF) Hosts012() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TractF) MutateHosts012(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *TractF) Hosts3p(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *TractF) Hosts3pLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TractF) MutateHosts3p(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *TractF) Version() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TractF) MutateVersion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *TractF) Rs63Chunk(obj *TractIDF) *TractIDF {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(TractIDF)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TractF) Rs83Chunk(obj *TractIDF) *TractIDF {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(TractIDF)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TractF) Rs103Chunk(obj *TractIDF) *TractIDF {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(TractIDF)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TractF) Rs125Chunk(obj *TractIDF) *TractIDF {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(TractIDF)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func TractFStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TractFAddHosts012(builder *flatbuffers.Builder, hosts012 uint64) {
	builder.PrependUint64Slot(0, hosts012, 0)
}
func TractFAddHosts3p(builder *flatbuffers.Builder, hosts3p flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(hosts3p), 0)
}
func TractFStartHosts3pVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TractFAddVersion(builder *flatbuffers.Builder, version uint32) {
	builder.PrependUint32Slot(2, version, 0)
}
func TractFAddRs63Chunk(builder *flatbuffers.Builder, rs63Chunk flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(rs63Chunk), 0)
}
func TractFAddRs83Chunk(builder *flatbuffers.Builder, rs83Chunk flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(rs83Chunk), 0)
}
func TractFAddRs103Chunk(builder *flatbuffers.Builder, rs103Chunk flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(rs103Chunk), 0)
}
func TractFAddRs125Chunk(builder *flatbuffers.Builder, rs125Chunk flatbuffers.UOffsetT) {
	builder.PrependStructSlot(6, flatbuffers.UOffsetT(rs125Chunk), 0)
}
func TractFEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
