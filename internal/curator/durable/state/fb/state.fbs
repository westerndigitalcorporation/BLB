// Copyright (c) 2017 Western Digital Corporation or its affiliates. All rights reserved.
// SPDX-License-Identifier: MIT

namespace internal.curator.durable.state.fb;

// TractIDF is a 10-byte value that can refer to a tract or an RS chunk, just like common.TractID.
// Declare it with five uint16s so flatbuffers doesn't pad for excessive alignment.
struct TractIDF {
  b1: uint16;
  b2: uint16;
  b3: uint16;
  b4: uint16;
  b5: uint16;
}

// PartitionF holds data about one partition. ID is not strictly necessary since it should
// always be determined by context, but it makes some code simpler, and there will be very
// few of these.
table PartitionF {
  id: uint32;
  next_blob_key: uint32;
  next_rs_chunk_key: uint64; // 48 bits of "blob key" and "tract index" in one value
}

// TractF holds data about one tract of one blob.
table TractF {
  // Used for REPLICATED class.
  hosts012: uint64;  // first three hosts packed into a uint64, 20 bits each
  hosts3p: [uint32]; // hosts beyond the first three

  // Used for all classes.
  version: uint32;

  // Used for RS_X classes.
  // There must be exactly one of these for each RS_n_m enum value in
  // common.StorageClass.
  rs63_chunk:  TractIDF;
  rs83_chunk:  TractIDF;
  rs103_chunk: TractIDF;
  rs125_chunk: TractIDF;
}

// BlobF holds data about one blob.
table BlobF {
  // To save space in the flatbuffers encoding, we pack several small fields
  // into one value here. From LSB to MSB, each one byte:
  // 0: Storage class for this blob (applies to all tracts). Value is core.StorageClass.
  // 1: Client storage hint. Value is core.StorageHint.
  // 2: Replication level. For REPLICATED only.
  // 3: Unused.
  packed_meta: uint32;

  // Storage metadata for each tract.
  tracts: [TractF];

  // Time that this blob was deleted, or zero if it is not deleted (unix seconds).
  deletedsec: uint32 = 0;

  // Time of last open for write (unix seconds).
  mtimesec: uint32;

  // Time of last open for read (unix seconds).
  atimesec: uint32;

  // Time that this blob can be automatically deleted, or zero if it is permanent
  // (unix seconds).
  expiressec: uint32 = 0;
}

// RSC_TractF describes one tract inside of an RS chunk.
struct RSC_TractF {
  id: TractIDF;   // id of tract stored here
  length: uint32; // length of tract data
  offset: uint32; // offset within this piece
}

// RSC_DataF describes one RS piece (of an RS chunk). (It's a separate type
// because flatbuffers doesn't allow vectors of vectors directly.)
table RSC_DataF {
  tracts: [RSC_TractF]; // any number of values
}

// RSChunkF describes a coded set of some number of data tracts. For coding with
// RS N,M (N data and M parity), there will be exactly N values in "data" and
// N+M values in "hosts", the first N referring to the locations of the data
// pieces and the following M referring to the locations of the parity pieces.
// The number of real tracts within a data piece can be anything.
// N and M are not encoded explicitly in RSChunkF since they can be determined
// from the lengths of data and hosts.
table RSChunkF {
  data: [RSC_DataF]; // exactly N values
  hosts: [uint32];   // exactly N+M values
}
